# Generated by Django 5.2.4 on 2025-08-02 20:54

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Behavior",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "behavior_type",
                    models.CharField(
                        choices=[
                            ("EXP", "Exploración"),
                            ("INT", "Interacción"),
                            ("OTH", "Otro"),
                        ],
                        default="EXP",
                        help_text="Tipo general de comportamiento",
                        max_length=3,
                    ),
                ),
            ],
            options={
                "verbose_name": "Comportamiento",
                "verbose_name_plural": "Comportamientos",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("institution", models.CharField(blank=True, max_length=100)),
                ("department", models.CharField(blank=True, max_length=100)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuario",
                "verbose_name_plural": "Usuarios",
                "ordering": ["username"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Experiment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("mouse_name", models.CharField(max_length=100)),
                ("date", models.DateField()),
                ("video_file", models.FileField(upload_to="experiments/")),
                ("status", models.CharField(default="uploaded", max_length=20)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ExperimentObject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "reference",
                    models.IntegerField(
                        choices=[(1, "Objeto 1"), (2, "Objeto 2")],
                        help_text="Referencia numérica del objeto (1 o 2)",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        blank=True,
                        choices=[("NOV", "Novel"), ("FAM", "Familiar")],
                        help_text="Tipo de objeto (Novel o Familiar)",
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "time",
                    models.FloatField(
                        default=0.0, help_text="Tiempo total de exploración en segundos"
                    ),
                ),
                (
                    "experiment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="objects",
                        to="core.experiment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Objeto de Experimento",
                "verbose_name_plural": "Objetos de Experimento",
                "ordering": ["experiment", "reference"],
            },
        ),
        migrations.CreateModel(
            name="Clip",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("video_clip", models.FileField(upload_to="experiments/clips/")),
                (
                    "duration",
                    models.FloatField(
                        help_text="Duración en segundos (calculada como end_time - start_time)"
                    ),
                ),
                (
                    "valid",
                    models.BooleanField(
                        default=True, help_text="Clip validado manualmente"
                    ),
                ),
                (
                    "start_time",
                    models.FloatField(
                        help_text="Tiempo de inicio en el video original (segundos)"
                    ),
                ),
                (
                    "end_time",
                    models.FloatField(
                        blank=True,
                        help_text="Tiempo de finalización en el video original (segundos)",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "behavior",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="clips",
                        to="core.behavior",
                    ),
                ),
                (
                    "experiment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="clips",
                        to="core.experiment",
                    ),
                ),
                (
                    "experiment_object",
                    models.ForeignKey(
                        help_text="Objeto asociado al clip (1 o 2)",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="clips",
                        to="core.experimentobject",
                    ),
                ),
            ],
            options={
                "verbose_name": "Clip de Comportamiento",
                "verbose_name_plural": "Clips de Comportamiento",
                "ordering": ["experiment", "start_time"],
            },
        ),
        migrations.AddConstraint(
            model_name="experimentobject",
            constraint=models.UniqueConstraint(
                fields=("experiment", "reference"),
                name="unique_object_reference_per_experiment",
            ),
        ),
        migrations.AddIndex(
            model_name="clip",
            index=models.Index(
                fields=["experiment", "valid"], name="core_clip_experim_0d2fb3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="clip",
            index=models.Index(
                fields=["behavior"], name="core_clip_behavio_5544fe_idx"
            ),
        ),
    ]
